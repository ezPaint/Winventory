<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.simoncomputing.app.winventory.dao.HardwareToSoftwareDao">

    <resultMap id="HardwareToSoftwareMapper" type="com.simoncomputing.app.winventory.domain.HardwareToSoftware">
        <result column ="KEY"                 property = "key" />
        <result column ="HARDWARE_ID"         property = "hardwareId" />
        <result column ="SOFTWARE_ID"         property = "softwareId" />
    </resultMap>

    <select id="read" parameterType="map" resultMap="HardwareToSoftwareMapper">
        select * from HARDWARE_TO_SOFTWARE
        where ${where}
    </select>

    <insert id="create" parameterType="com.simoncomputing.app.winventory.domain.HardwareToSoftware">
        <selectKey resultType="_long" keyProperty="key" order="BEFORE">
            select HARDWARE_TO_SOFTWARE_SEQ.nextval from dual
        </selectKey>
        insert into HARDWARE_TO_SOFTWARE
        (
            KEY , HARDWARE_ID , SOFTWARE_ID
        )
        values
        (
            #{key} , #{hardwareId} , #{softwareId}
        )
    </insert>

    <select id="getListByHardwareId" parameterType="integer" resultMap="HardwareToSoftwareMapper">
        select * from HARDWARE_TO_SOFTWARE
        where HARDWARE_ID = #{hardwareId}
    </select>
    <select id="getListBySoftwareId" parameterType="integer" resultMap="HardwareToSoftwareMapper">
        select * from HARDWARE_TO_SOFTWARE
        where SOFTWARE_ID = #{softwareId}
    </select>


    <update id="update" parameterType="com.simoncomputing.app.winventory.domain.HardwareToSoftware">
        update HARDWARE_TO_SOFTWARE set
            KEY                                 = #{key} ,
            HARDWARE_ID                         = #{hardwareId} ,
            SOFTWARE_ID                         = #{softwareId}
        where KEY = #{key}
    </update>

    <delete id="delete" parameterType="map">
        delete from HARDWARE_TO_SOFTWARE
        where ${where}
    </delete>


    <!-- PROTECTED CODE -->

</mapper>